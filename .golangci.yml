# .golangci.yml
# This file configures golangci-lint for the YASL project.

run:
  # Maximum duration for the whole linting process.
  # Can be overridden by the --timeout flag in the GitHub Action.
  timeout: 10s

issues:
  exclude-dirs-use-default: false # Replacement for skip-dirs-use-default

linters:
  # Enable specific linters that you want to use.
  # A good starting set:
  enable:
    - govet         # Official Go tool for suspicious constructs
    - staticcheck   # Advanced static analysis for bugs, performance, etc.
    - unused        # Finds unused variables, functions, etc. (replaces structcheck and varcheck)
    - ineffassign   # Detects assignments to existing variables that are not used
    - rowserrcheck  # Checks for errors in database.Rows.Close()
    - nilerr        # Checks that `nil` is not used as an error value
    - typecheck     # Catches type errors not caught by the Go compiler
    - gosimple      # Simplifies code constructions
    - unconvert     # Detects unnecessary type conversions
    - whitespace    # Checks for correct whitespace usage
    - stylecheck    # Enforces Go project style guidelines (configurable)
    - errcheck      # Checks for unchecked errors
    - gosec         # Golang Security Checker (important for security)

linters-settings:
  govet:
    # Removed deprecated check-shadowing
  staticcheck:
    # staticcheck is a powerful linter; you can selectively disable checks here
    # For example, if SA1019 (deprecated) is too noisy:
    # disable:
    #   - SA1019
  unused:
    # unused configuration
    # You can exclude specific identifiers from being checked for unused code
    check-exported: false # Set to true to check exported items for unused, can be noisy.

  # Example of configuring a linter if you want stricter rules:
  # gofmt:
  #   # Simplify formatting checks if needed
  #   simplify: true