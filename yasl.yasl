# This is the yasl schema for yasl itself.


types:
  - name: type_def
    namespace: yasl
    description: The definition for a YASL data structure.
    root: true
    properties:
      - name: name
        type: string
        description: The name of the type definition.
        required: true
        unique: true
      - name: namespace
        type: string
        description: The namespace in which the type definition is located.
        required: false
      - name: description
        type: string
        description: A description of the type definition.
        required: false
      - name: type
        type: any
        description: The type of the values when the type def is a primitive or list of primitives.
      - name: root
        type: bool
        description: Whether the type definition is a root type that can be used as a top-level data structure.
        required: false
        default: false
      - name: properties
        type: property[]
        description: The fields that make up the type definition.
      - name: validators
        type: validators
        description: The validators that apply to the type definition.
        required: false
    validators:
      only_one:
        - type
        - properties

  - name: property
    namespace: yasl
    description: A property in a YASL type definition.
    properties:
      - name: name
        type: str
        description: The name of the property.
        required: true
      - name: namespace
        type: str
        description: The namespace in which the property type is defined.
        required: false
      - name: type
        type: type
        description: The name of the primitive, enum, or type_def that this property is typed as.
        required: true
      - name: description
        type: str
        description: A description of the property.
        required: False
      - name: required
        type: bool
        description: Whether the property is required.
        required: false
        default: true
      - name: unique
        type: bool
        description: Whether the property must be unique across instances of the type definition.
        required: false
        default: false
      - name: default
        type: any
        description: The default value for the property if not provided.
        required: false

      # list property constraints
      - name: list_min
        type: int
        description: The minimum number of items in a list property.
        required: false
        default: 0
      - name: list_max
        type: int
        description: The maximum number of items in a list property.
        required: false

      # int and num property constraints
      - name: gt
        type: any
        any_of:
          - int
          - num
        description: The minimum value that the num or int must be greater than.
        required: false
      - name: ge
        type: any
        any_of:
          - int
          - num
        description: The minimum value that the num or int must be greater than or equal to.
        required: false
      - name: lt
        type: any
        any_of:
          - int
          - num
        description: The maximum value that the num or int must be less than.
        required: false
      - name: le
        type: any
        any_of:
          - int
          - num
        description: The maximum value that the num or int must be less than or equal to.
        required: false
      - name: exclude
        type: any[]
        any_of:
          - int
          - num
        description: A list of values that are excluded from valid values for the property.
        required: false

      # str property constraints
      - name: str_min
        type: int
        description: The minimum length of the str.
        required: false
      - name: str_max
        type: int
        description: The maximum length of the str.
        required: false
      - name: str_regex
        type: str[]
        description: A list of regular expressions a str property value must match.
        required: false

      # date property constraints
      - name: date_format
        type: str
        description: The date format to use for date properties per ISO 8601.
        required: false
        default: YYYY-MM-DD HH:MM:SS:ssss
      - name: before
        type: date
        description: A date before which the property value must be.
        required: false
      - name: after
        type: date
        description: A date after which the property value must be.
        required: false

      # URI property constraints
      - name: uri_regex
        type: str[]
        description: A list of regular expressions a URI property value must match.
        required: false
      - name: uri_exists
        type: bool
        description: Whether the URI property value must exist on the file system or network.
        required: false
      - name: is_dir
        type: bool
        description: Whether the URI property value must be a directory.
        required: false
      - name: is_file
        type: bool
        description: Whether the URI property value must be a file.
        required: false
      - name: uri_protocol
        type: str[]
        description: A list of allowed protocols for the URI property (i.e. http, https).
        required: false

      # any property constraints
      - name: any_of
        type: type[]
        description: A list of types that the any property value must match.
        required: false

      # ref property constraints
      - name: ref_exists
        type: bool
        description: Whether the reference property value must exist in the data.
        required: false
        default: true
      - name: ref_multi
        type: bool
        description: Whether the reference property may return multiple values (accounting for optional filters).
        required: false
        default: false
      - name: ref_filters
        type: ref_filter[]
        description: A list of filters to apply when resolving the reference property value.
        required: false
    validators:
      if_then:
        - eval: type
          begins_with: str
          absent:
            - gt
            - ge
            - lt
            - le
            - exclude
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: int
          absent:
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: num
          absent:
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: date
          absent:
            - gt
            - ge
            - lt
            - le
            - exclude
            - str_min
            - str_max
            - str_regex
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: bool
          absent:
            - gt
            - ge
            - lt
            - le
            - exclude
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: uri
          absent:
            - gt
            - ge
            - lt
            - le
            - exclude
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - any_of
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: any
          absent:
            - gt
            - ge
            - lt
            - le
            - exclude
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - ref_exists
            - ref_multi
            - ref_filters
        - eval: type
          begins_with: ref
          # check that the ref type is properly formatted
          # to include the ref target and is optionally
          # a list
          regex: ^ref\((\.{0,2}(\/?[a-zA-Z0-9_\-\.]+)+)\)(?:\[\])?$
          absent:
            - min
            - max
            - exclude
            - str_min
            - str_max
            - str_regex
            - date_format
            - before
            - after
            - uri_regex
            - uri_exists
            - is_dir
            - is_file
            - uri_protocol
            - any_of
        - eval:
          ends_with: "[]"
          inverse: true
          absent:
            - list_min
            - list_max 


  - name: ref_filter
    namespace: yasl
    description: A filter to apply when resolving a reference property value.
    properties:
      - name: target
        type: ref
        description: The target string to filter by (i.e. type_def/name).
        required: true
      - name: value
        type: any
        description: The limiting value for the reference property.
        required: true

  - name: validators
    namespace: yasl
    description: The validators that can be applied to a type definition.
    properties:
      - name: only_one
        type: str[]
        description: A list of property names that must not be present together.
        required: false
      - name: at_least_one
        type: str[]
        description: A list of property names where one or more must be present.
        required: false
      - name: if_then
        type: if_then[]
        description: A list of conditions that must be met for the type definition.
        required: false

  - name: if_then
    namespace: yasl
    description: A condition that must be met for the type definition.
    properties:
      - name: eval
        type: string
        description: The name of the property to evaluate.
        required: true
      - name: inverse
        type: bool
        description: Whether to invert the condition (i.e. if the property value does NOT match the condition).
        required: false
        default: false
      - name: value
        type: any[]
        description: The values to compare to `if` for equivalence (i.e. `true` for a bool, `42` for int, `nil` for absence of data, etc.).
        required: true
        list_min: 1
      - name: begins_with
        type: str
        description: The value that the property value begin with.
        required: false
      - name: ends_with
        type: str
        description: The value that the property value end with.
        required: false
      - name: contains
        type: str
        description: The value that the property value contains.
        required: false
      - name: present
        type: ref(../../properties/name)[]
        description: A list of property names in the type definition that must be present if the condition is met.
        required: false
      - name: absent
        type: ref(../../properties/name)[]
        description: A list of proerty names in the type definition that must be absent if the condition is met.
        required: false
      - name: regex
        type: str
        description: A regular expression that the property value must match.
        required: false
    validators:
      only_one:
        - value
        - begins_with
        - ends_with
        - contains
      at_least_one:
        - present
        - absent
        - regex

  - name: enum
    namespace: yasl
    description: An enumerated value for a YASL type definition.
    root: true
    properties:
      - name: name
        type: str
        description: The name of the enumerated value.
        required: true
        unique: true
      - name: namespace
        type: str
        description: The namespace in which the enumerated value is located.
        required: false
      - name: description
        type: str
        description: A description of the enumerated value.
        required: false
      - name: values[]
        type: str
        description: The values of the enumerated value.
        required: true
        list_min: 1

  - name: project
    namespace: yasl
    description: An project definition for configuring yasl behavior and dependencies.
    root: true
    properties:
      - name: name
        type: str
        description:  The name of the project as it would appear in a repository when published.
        required: true
      - name: description
        type: str
        description: A description of the project.
        required: false
      - name: license
        type: str
        description: The license under which the project is released.
        required: false
      - name: version
        type: str
        description: The version of the project.
        required: false
      - name: keywords
        type: str[]
        description: A list of keywords associated with the project.
        required: false
      - name: attributes
        type: project_attributes
        description: A collection of default attributes for use when running yasl within the project context.
        required: false
      - name: content
        type: path[]
        description: A list of files that make up the schema definition.
      - name: imports
        type: project_import[]
        description: A list of projects or modules to import.

  - name: project_attributes
    namespace: yasl
    description: A collection of default attributes for use when running yasl within the project context.  These may be overridden by using CLI flags.
    properties:
      - name: quiet
        type: bool
        description:  Suppress non-error output
        default: false
      - name: verbose
        type: bool
        description: enable verbose (debug level) output
        default: false
      - name: output
        type: LOG_OUTPUT
        description: The log output format.
        default: text
      - name: sslVerify
        type: bool
        description: Enable/disable SSL verification.
        default: true
      - name: httpProxy
        type: str
        description: HTTP proxy URL.
        default: ""
      - name: httpsProxy
        type: str
        description: HTTPS proxy URL.
        default: ""
      - name: treatWarningsAsErrors
        type: bool
        description: If true, warnings are treated as errors and will cause a nonzero exit code.
        default: false

  - name: project_import
    namespace: yasl
    description: A definition for importing other YASL projects or modules.
    properties:
      - name: source
        type: uri
        description: The URI of the project or module to import.
        required: true
      - name: version
        type: str
        description: The version of the project or module to import.
        required: false

enums:
  - name: LOG_OUTPUT
    namespace: yasl
    description: The log output format.
    values:
      - text
      - json
      - yaml