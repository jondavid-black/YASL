# .github/workflows/ci.yml
name: YASL CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install mingw-w64 for Windows CGO
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Or your desired Go version

      - name: Ensure Go Dependencies
        run: |
          go mod tidy
          go mod download

      - name: Build Linux Executable
        run: |
          GOOS=linux GOARCH=amd64 go build -o yasl main.go

      - name: Build Windows Executable (CGO)
        env:
          CC: x86_64-w64-mingw32-gcc
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
        run: go build -o yasl.exe main.go

      - name: Check Version Bump
        run: |
          git fetch origin main:refs/remotes/origin/main
          current_version=$(grep 'const Version' core/core.go | awk -F'"' '{print $2}')
          main_version=$(git show origin/main:core/core.go | grep 'const Version' | awk -F'"' '{print $2}')
          echo "Current branch version: $current_version"
          echo "Main branch version: $main_version"
          if [ "$current_version" = "$main_version" ]; then
            echo "Version has not been updated! Please bump the Version constant in core/core.go."
            exit 1
          fi

      - name: Check Go Formatting
        run: |
          gofmt -l -w main.go main_test.go
          git diff --exit-code '*.go' || (echo 'Go files are not properly formatted. Please run gofmt.' && exit 1)

      - name: Run Go Tests
        run: go test -v ./...

      # --- Static Analysis ---
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v1.59.1
          args: --config .golangci.yml --timeout=5m --issues-exit-code=1

      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: yasl
          path: yasl

      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: yasl.exe
          path: yasl.exe

      # Tag the repo with the version number if on main branch and all steps succeed
      - name: Tag repo with version
        if: github.ref == 'refs/heads/main' && success()
        run: |
          version=$(grep 'const Version' main.go | awk -F'"' '{print $2}')
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag "$version"
          git push origin "$version"

      # Create a GitHub release if on main branch and all steps succeed
      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' && success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_repo_with_version.outputs.version || (grep('const Version', 'main.go') | awk -F'"' '{print $2}') }}
          name: Release ${{ steps.tag_repo_with_version.outputs.version || (grep('const Version', 'main.go') | awk -F'"' '{print $2}') }}
          draft: false
          prerelease: false
          files: |
            yasl
            yasl.so
            yasl.exe
            yasl.h
            yasl.dll
            yasl.yasl
